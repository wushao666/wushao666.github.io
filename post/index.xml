<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 吴少在Coding</title>
    <link>http://wushao666.github.io/post/</link>
    <description>Recent content in Posts on 吴少在Coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 10 Oct 2022 14:31:28 +0800</lastBuildDate><atom:link href="http://wushao666.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>手写miniVue3-06实现ref、isRef、UnRef</title>
      <link>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-06%E5%AE%9E%E7%8E%B0refisrefunref/</link>
      <pubDate>Mon, 10 Oct 2022 14:31:28 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-06%E5%AE%9E%E7%8E%B0refisrefunref/</guid>
      <description>实现ref 本节我们要实现一个超级重要的响应式操作-ref()，它是比响应式核心中的reactive()使用的更为频繁的一个操作，真正的vue</description>
    </item>
    
    <item>
      <title>手写miniVue3-05实现shallowReactive和isProxy</title>
      <link>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-05%E5%AE%9E%E7%8E%B0shallowreactive%E5%92%8Cisproxy/</link>
      <pubDate>Mon, 10 Oct 2022 10:07:06 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-05%E5%AE%9E%E7%8E%B0shallowreactive%E5%92%8Cisproxy/</guid>
      <description>实现shallowReactive shallowReadonly 照旧，我们先来看看测试用例，要做什么： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // shallowReactive.spec.ts</description>
    </item>
    
    <item>
      <title>手写miniVue3-04实现isReadonly和isReactive和嵌套对象深层响应</title>
      <link>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-04%E5%AE%9E%E7%8E%B0isreadonly%E5%92%8Cisreactive%E5%92%8C%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1%E6%B7%B1%E5%B1%82%E5%93%8D%E5%BA%94/</link>
      <pubDate>Sun, 09 Oct 2022 17:24:00 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-04%E5%AE%9E%E7%8E%B0isreadonly%E5%92%8Cisreactive%E5%92%8C%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1%E6%B7%B1%E5%B1%82%E5%93%8D%E5%BA%94/</guid>
      <description>实现isReadonly和isReactive 这两个属于响应式的工具类，判断是属于哪种类型的响应式对象，照旧先看测试用例： 1 2 3 4 5 6 7 // reactive.spec.ts</description>
    </item>
    
    <item>
      <title>手写miniVue3-03实现readonly并重构响应式模块</title>
      <link>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-03%E5%AE%9E%E7%8E%B0readonly%E5%B9%B6%E9%87%8D%E6%9E%84%E5%93%8D%E5%BA%94%E5%BC%8F/</link>
      <pubDate>Sun, 09 Oct 2022 14:59:45 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-03%E5%AE%9E%E7%8E%B0readonly%E5%B9%B6%E9%87%8D%E6%9E%84%E5%93%8D%E5%BA%94%E5%BC%8F/</guid>
      <description>重构reactive 本来我们应该直接实现readonly模块的，但是其实它本质上和reactive很像，只不过它是只读的，不能set，set</description>
    </item>
    
    <item>
      <title>手写miniVue3-02实现effect的runner-scheduler-stop功能</title>
      <link>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-02%E5%AE%9E%E7%8E%B0effect%E7%9A%84runner-scheduler-stop%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sun, 09 Oct 2022 11:58:26 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-02%E5%AE%9E%E7%8E%B0effect%E7%9A%84runner-scheduler-stop%E5%8A%9F%E8%83%BD/</guid>
      <description>实现effect的runner 前面一节，已经实现了基础版的reactive和effect，但是vue3的effect实际上还有另外三种副作用</description>
    </item>
    
    <item>
      <title>手写miniVue3-01实现effect和reactive</title>
      <link>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-01%E5%AE%9E%E7%8E%B0effect%E5%92%8Creactive/</link>
      <pubDate>Sat, 08 Oct 2022 22:27:32 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E6%89%8B%E5%86%99minivue3-01%E5%AE%9E%E7%8E%B0effect%E5%92%8Creactive/</guid>
      <description>mini-vue初始化 本系列将会实现一个mini 😊的vue3框架，但是在开始写代码之前需要做一些准备工作，安装相关依赖 安装typescrip</description>
    </item>
    
    <item>
      <title>后台管理系统性能优化</title>
      <link>http://wushao666.github.io/post/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 28 Sep 2022 10:28:03 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>项目结构调整 Base开头是全局业务组件 BaseForm BasePagination BaseIcon Form开头是Form相关的小组件 FormPanel Table开发时Table相关的小组件 TableOptions The开头的是每个页</description>
    </item>
    
    <item>
      <title>Http缓存机制</title>
      <link>http://wushao666.github.io/post/http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 27 Sep 2022 15:12:54 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/http%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>今天来记录一下浏览器的缓存机制。 缓存 缓存是在web开发中经常用到的一种技术，有很多的应用场景，今天主要聊聊http请求的缓存。 设计缓存机制 w</description>
    </item>
    
    <item>
      <title>手写goweb框架02-路由实现</title>
      <link>http://wushao666.github.io/post/%E6%89%8B%E5%86%99goweb%E6%A1%86%E6%9E%B602-%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 16 Sep 2022 16:58:00 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E6%89%8B%E5%86%99goweb%E6%A1%86%E6%9E%B602-%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0/</guid>
      <description>本节我们来实现框架的基础路由部分，我们会按照5步循序渐进的实现这个路由。 go原生实现基础路由 go的http包很强大，可以直接实现基础路由做测</description>
    </item>
    
    <item>
      <title>手写goweb框架01-分析框架</title>
      <link>http://wushao666.github.io/post/%E6%89%8B%E5%86%99goweb%E6%A1%86%E6%9E%B601-%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Fri, 16 Sep 2022 11:07:07 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E6%89%8B%E5%86%99goweb%E6%A1%86%E6%9E%B601-%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/</guid>
      <description>为什么需要一个web框架，主要是因为我们使用原生go的http库进行开发web项目时，存在很多重复繁琐的操作，一些复杂的业务场景需要做大量的</description>
    </item>
    
    <item>
      <title>云服务器搭建</title>
      <link>http://wushao666.github.io/post/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 08 May 2022 22:42:02 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</guid>
      <description>购买云服务器 阿里云或者腾讯云都可，腾讯云便宜些。云服务器会提供一个公网IP，给域名解析用，镜像可能是centos或者Ubuntu，本文以ce</description>
    </item>
    
    <item>
      <title>同一台电脑创建多个github账户</title>
      <link>http://wushao666.github.io/post/%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E6%88%B7/</link>
      <pubDate>Sat, 04 Dec 2021 21:52:55 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E6%88%B7/</guid>
      <description>&lt;p&gt;通常我们会有一个工作的gitlab账户、还会有一个github私人账号用，或者有两个及以上的github账号，所以在同一台电脑上会存在多个&lt;code&gt;github&lt;/code&gt;账户的情况，此时默认的githug配置不在生效，我们要先清除掉之前设置的全局&lt;code&gt;github 用户名和邮箱&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hugo搭建博客</title>
      <link>http://wushao666.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 04 Dec 2021 15:10:38 +0800</pubDate>
      
      <guid>http://wushao666.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;写作是每个人都必备的技能，它可以帮你梳理逻辑，检查自己的思考过程。进入互联网时代后，手写文章的机会变得少了，使用网络博客的机会和场景变得多了起来，无论是自己做技术总结、公司写技术方案都需要博客，工具千千万，但是要想写的好文章却是要一直打磨。我从17年到今天之前我都是用的&lt;code&gt;hexo&lt;/code&gt;搭建的博客，&lt;code&gt;hexo&lt;/code&gt;是用&lt;code&gt;javascript&lt;/code&gt;写的静态博客框架，使用起来也挺方便，但是安装过程和后续换电脑或者更新过后可能会遇到一些各种&lt;code&gt;bug&lt;/code&gt;，后来被前辈老师朋友们安利&lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;，它使用&lt;code&gt;go&lt;/code&gt;写的，安装、运行都速度极快，对新手极为友好，故今天开始用它重新更新博客，并记录一下搭建的过程。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
